[{"categories":["Hugo"],"contents":"如何评论 使用 Valine 进行评论十分方便，您只需要填入以下内容：\n   昵称 邮箱 网址     可任意填写 填写个人有效邮箱地址 填写个人有效网址    甚至，您可以不填写以上任何一项个人信息，进行匿名评论。但强烈建议填入个人有效邮箱，这样当您的评论被回复时，您将及时收到一封提醒邮件。\n由于 Valine 的特性，您将无法自行删除自己的评论，如果有需要，可以给我发送邮件进行删除。您也无需担心隐私被泄露，网页的评论区不会显示您的邮箱，并且您完全可以选择匿名评论。\nValine 支持 Markdown，Markdown 是一种非常流行且方便的轻量级标记语言，您可以使用它的语法撰写评论。您也可以无视 Markdown 的特性，直接撰写评论即可。\nValine 使用的是 Gravatar 作为评论列表头像，您会被分配一个默认头像。如果想更改头像，登录或注册 Gravatar，然后修改自己的头像。评论的时候，留下在 Gravatar 注册时所使用的邮箱即可。\n 如果您修改了头像后发现没有更新，请不要慌张，因为gravatar.cat.net 有七天的缓存期，安静的等待吧\n 邮件提醒 当有人回复您的评论时，如果您填入了有效的邮件地址，则您也会收到来自kevinfan.blog@qq.com发送的类似如下的提醒邮件：\n  理论上直接回复提醒邮件，我也能收到，但依然建议您点击邮件中的链接，回到博客评论区进行回复操作。\n如果您发现您的评论被回复，但没有收到邮件提醒，请检查是否填写了正确的个人邮箱地址，以及检查一下邮箱的垃圾箱。如果依然没有收到回复提醒邮件，可以给我发送邮件进行反馈。\n参考链接  https://enit.xyz/tech/valine-guide/ https://valine.js.org/ ","permalink":"http://fmx789.github.io/posts/valine-guide.html/","tags":["Valine"],"title":"Valine简易说明"},{"categories":["Hugo"],"contents":"表情与情感 笑脸表情    图标 代码 图标 代码     😀 grinning 😃 smiley   😄 smile 😁 grin   😆 laughing satisfied 😅 sweat_smile   🤣 rofl 😂 joy   🙂 slightly_smiling_face 🙃 upside_down_face   😉 wink 😊 blush   😇 innocent      爱意表情    图标 代码 图标 代码     😍 heart_eyes 😘 kissing_heart   😗 kissing ☺️ relaxed   😚 kissing_closed_eyes 😙 kissing_smiling_eyes    吐舌头表情    图标 代码 图标 代码     😋 yum 😛 stuck_out_tongue   😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes   🤑 money_mouth_face      带手的表情    图标 代码 图标 代码     🤗 hugs 🤔 thinking    中性表情    图标 代码 图标 代码     🤐 zipper_mouth_face 😐 neutral_face   😑 expressionless 😶 no_mouth   😏 smirk 😒 unamused   🙄 roll_eyes 😬 grimacing   🤥 lying_face      困倦的表情    图标 代码 图标 代码     😌 relieved 😔 pensive   😪 sleepy 🤤 drooling_face   😴 sleeping      不适的表情    图标 代码 图标 代码     😷 mask 🤒 face_with_thermometer   🤕 face_with_head_bandage 🤢 nauseated_face   🤧 sneezing_face 😵 dizzy_face    戴帽子的表情    图标 代码 图标 代码     🤠 cowboy_hat_face      戴眼镜的表情    图标 代码 图标 代码     😎 sunglasses 🤓 nerd_face    担心的表情    图标 代码 图标 代码     😕 confused 😟 worried   🙁 slightly_frowning_face ☹ frowning_face   😮 open_mouth 😯 hushed   😲 astonished 😳 flushed   😦 frowning 😧 anguished   😨 fearful 😰 cold_sweat   😥 disappointed_relieved 😢 cry   😭 sob 😱 scream   😖 confounded 😣 persevere   😞 disappointed 😓 sweat   😩 weary 😫 tired_face    否定的表情    图标 代码 图标 代码     😤 triumph 😡 pout rage   😠 angry 😈 smiling_imp   👿 imp 💀 skull   ☠️ skull_and_crossbones      特殊打扮的表情    图标 代码 图标 代码     💩 hankey poop shit 🤡 clown_face   👹 japanese_ogre 👺 japanese_goblin   👻 ghost 👽 alien   👾 space_invader 🤖 robot    猫脸表情    图标 代码 图标 代码     😺 smiley_cat 😸 smile_cat   😹 joy_cat 😻 heart_eyes_cat   😼 smirk_cat 😽 kissing_cat   🙀 scream_cat 😿 crying_cat_face   😾 pouting_cat      猴脸表情    图标 代码 图标 代码     🙈 see_no_evil 🙉 hear_no_evil   🙊 speak_no_evil      情感    图标 代码 图标 代码     💋 kiss 💌 love_letter   💘 cupid 💝 gift_heart   💖 sparkling_heart 💗 heartpulse   💓 heartbeat 💞 revolving_hearts   💕 two_hearts 💟 heart_decoration   ❣️ heavy_heart_exclamation 💔 broken_heart   ❤️ heart 💛 yellow_heart   💚 green_heart 💙 blue_heart   💜 purple_heart 🖤 black_heart   💯 100 💢 anger   💥 boom collision 💫 dizzy   💦 sweat_drops 💨 dash   🕳️ hole 💣 bomb   💬 speech_balloon 👁️‍🗨️ eye_speech_bubble   🗯️ right_anger_bubble 💭 thought_balloon   💤 zzz      人与身体 张开手掌的手势    图标 代码 图标 代码     👋 wave 🤚 raised_back_of_hand   🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand   🖖 vulcan_salute      部分手指的手势    图标 代码 图标 代码     👌 ok_hand ✌️ v   🤞 crossed_fingers 🤘 metal   🤙 call_me_hand      一根手指的手势    图标 代码 图标 代码     👈 point_left 👉 point_right   👆 point_up_2 🖕 fu middle_finger   👇 point_down ☝️ point_up    握紧的手势    图标 代码 图标 代码     👍 +1 thumbsup 👎 -1 thumbsdown   ✊ fist fist_raised 👊 facepunch fist_oncoming punch   🤛 fist_left 🤜 fist_right    两只手    图标 代码 图标 代码     👏 clap 🙌 raised_hands   👐 open_hands 🤝 handshake   🙏 pray      握住东西的手势    图标 代码 图标 代码     ✍️ writing_hand 💅 nail_care   🤳 selfie      身体部位    图标 代码 图标 代码     💪 muscle 👂 ear   👃 nose 👀 eyes   👁️ eye 👅 tongue   👄 lips      人    图标 代码 图标 代码     👶 baby 👦 boy   👧 girl :blonde_man: blonde_man person_with_blond_hair   👨 man 👩 woman   👱‍♀️ blonde_woman 👴 older_man   👵 older_woman      身体动作    图标 代码 图标 代码     🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man   🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man   🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man   🙆‍♀️ ok_woman 🙆‍♂️ ok_man   💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man   🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man   🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman   🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming   🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging    人物角色    图标 代码 图标 代码     👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker   👨‍🎓 man_student 👩‍🎓 woman_student   👨‍🏫 man_teacher 👩‍🏫 woman_teacher   👨‍⚖️ man_judge 👩‍⚖️ woman_judge   👨‍🌾 man_farmer 👩‍🌾 woman_farmer   👨‍🍳 man_cook 👩‍🍳 woman_cook   👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic   👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker   👨‍💼 man_office_worker 👩‍💼 woman_office_worker   👨‍🔬 man_scientist 👩‍🔬 woman_scientist   👨‍💻 man_technologist 👩‍💻 woman_technologist   👨‍🎤 man_singer 👩‍🎤 woman_singer   👨‍🎨 man_artist 👩‍🎨 woman_artist   👨‍✈️ man_pilot 👩‍✈️ woman_pilot   👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut   👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter   👮‍♂️ cop policeman 👮‍♀️ policewoman   🕵 detective male_detective 🕵️‍♀️ female_detective   💂‍♂️ guardsman 💂‍♀️ guardswoman   👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman   🤴 prince 👸 princess   👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban   👲 man_with_gua_pi_mao 🤵 man_in_tuxedo   👰 bride_with_veil 🤰 pregnant_woman    幻想的人物    图标 代码 图标 代码     👼 angel 🎅 santa   🤶 mrs_claus      人物活动    图标 代码 图标 代码     💆‍♀️ massage massage_woman 💆‍♂️ massage_man   💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man   🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman   🏃‍♂️ runner running running_man 🏃‍♀️ running_woman   💃 dancer 🕺 man_dancing   🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women   👯‍♂️ dancing_men      体育    图标 代码 图标 代码     🤺 person_fencing 🏇 horse_racing   ⛷️ skier 🏂 snowboarder   🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman   🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman   🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman   🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman   ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman   🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman   🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman   🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman   🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling   🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling   🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo   🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball   🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling    休息    图标 代码 图标 代码     🛀 bath 🛌 sleeping_bed    家庭    图标 代码 图标 代码     👭 two_women_holding_hands 👫 couple   👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman   👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman   👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man   👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy   👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy   👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl   👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl   👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy   👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy   👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy   👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl   👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy   👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy   👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy   👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl   👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl    人物符号    图标 代码 图标 代码     🗣 speaking_head 👤 bust_in_silhouette   👥 busts_in_silhouette 👣 footprints    动物与自然 哺乳动物    图标 代码 图标 代码     🐵 monkey_face 🐒 monkey   🦍 gorilla 🐶 dog   🐕 dog2 🐩 poodle   🐺 wolf 🦊 fox_face   🐱 cat 🐈 cat2   🦁 lion 🐯 tiger   🐅 tiger2 🐆 leopard   🐴 horse 🐎 racehorse   🦄 unicorn 🦌 deer   🐮 cow 🐂 ox   🐃 water_buffalo 🐄 cow2   🐷 pig 🐖 pig2   🐗 boar 🐽 pig_nose   🐏 ram 🐑 sheep   🐐 goat 🐪 dromedary_camel   🐫 camel 🐘 elephant   🦏 rhinoceros 🐭 mouse   🐁 mouse2 🐀 rat   🐹 hamster 🐰 rabbit   🐇 rabbit2 🐿️ chipmunk   🦇 bat 🐻 bear   🐨 koala 🐼 panda_face   🐾 feet paw_prints      鸟类    图标 代码 图标 代码     🦃 turkey 🐔 chicken   🐓 rooster 🐣 hatching_chick   🐤 baby_chick 🐥 hatched_chick   🐦 bird 🐧 penguin   🕊 dove 🦅 eagle   🦆 duck 🦉 owl    两栖动物    icon code icon code     🐸 frog      爬虫类    图标 代码 图标 代码     🐊 crocodile 🐢 turtle   🦎 lizard 🐍 snake   🐲 dragon_face 🐉 dragon    海洋动物    图标 代码 图标 代码     🐳 whale 🐋 whale2   🐬 dolphin flipper 🐟 fish   🐠 tropical_fish 🐡 blowfish   🦈 shark 🐙 octopus   🐚 shell      虫类    图标 代码 图标 代码     🐌 snail 🦋 butterfly   🐛 bug 🐜 ant   🐝 bee honeybee 🐞 beetle   🕷️ spider 🕸️ spider_web   🦂 scorpion      花类植物    图标 代码 图标 代码     💐 bouquet 🌸 cherry_blossom   💮 white_flower 🏵️ rosette   🌹 rose 🥀 wilted_flower   🌺 hibiscus 🌻 sunflower   🌼 blossom 🌷 tulip    其它植物    图标 代码 图标 代码     🌱 seedling 🌲 evergreen_tree   🌳 deciduous_tree 🌴 palm_tree   🌵 cactus 🌾 ear_of_rice   🌿 herb ☘️ shamrock   🍀 four_leaf_clover 🍁 maple_leaf   🍂 fallen_leaf 🍃 leaves    食物与饮料 水果    图标 代码 图标 代码     🍇 grapes 🍈 melon   🍉 watermelon 🍊 mandarin orange tangerine   🍋 lemon 🍌 banana   🍍 pineapple 🍎 apple   🍏 green_apple 🍐 pear   🍑 peach 🍒 cherries   🍓 strawberry 🥝 kiwi_fruit   🍅 tomato      蔬菜    图标 代码 图标 代码     🥑 avocado 🍆 eggplant   🥔 potato 🥕 carrot   🌽 corn 🌶️ hot_pepper   🥒 cucumber 🍄 mushroom   🥜 peanuts 🌰 chestnut    快餐    图标 代码 图标 代码     🍞 bread 🥐 croissant   🥖 baguette_bread 🥞 pancakes   🧀 cheese 🍖 meat_on_bone   🍗 poultry_leg 🥓 bacon   🍔 hamburger 🍟 fries   🍕 pizza 🌭 hotdog   🌮 taco 🌯 burrito   🥙 stuffed_flatbread 🥚 egg   🍳 fried_egg 🥘 shallow_pan_of_food   🍲 stew 🥗 green_salad   🍿 popcorn      亚洲食物    图标 代码 图标 代码     🍱 bento 🍘 rice_cracker   🍙 rice_ball 🍚 rice   🍛 curry 🍜 ramen   🍝 spaghetti 🍠 sweet_potato   🍢 oden 🍣 sushi   🍤 fried_shrimp 🍥 fish_cake   🍡 dango      海鲜    图标 代码 图标 代码     🦀 crab 🦐 shrimp   🦑 squid      甜点    图标 代码 图标 代码     🍦 icecream 🍧 shaved_ice   🍨 ice_cream 🍩 doughnut   🍪 cookie 🎂 birthday   🍰 cake 🍫 chocolate_bar   🍬 candy 🍭 lollipop   🍮 custard 🍯 honey_pot    饮料    图标 代码 图标 代码     🍼 baby_bottle 🥛 milk_glass   ☕ coffee 🍵 tea   🍶 sake 🍾 champagne   🍷 wine_glass 🍸 cocktail   🍹 tropical_drink 🍺 beer   🍻 beers 🥂 clinking_glasses   🥃 tumbler_glass      餐具    图标 代码 图标 代码     🍽️ plate_with_cutlery 🍴 fork_and_knife   🥄 spoon 🔪 hocho knife   🏺 amphora      旅游与地理 地图    图标 代码 图标 代码     🌍 earth_africa 🌎 earth_americas   🌏 earth_asia 🌐 globe_with_meridians   🗺️ world_map 🗾 japan    地理现象    图标 代码 图标 代码     🏔 mountain_snow ⛰️ mountain   🌋 volcano 🗻 mount_fuji   🏕️ camping ⛱ beach_umbrella   🏜️ desert 🏝️ desert_island   🏞️ national_park      建筑物    图标 代码 图标 代码     🏟️ stadium 🏛️ classical_building   🏗️ building_construction 🏘 houses   🏚 derelict_house 🏠 house   🏡 house_with_garden 🏢 office   🏣 post_office 🏤 european_post_office   🏥 hospital 🏦 bank   🏨 hotel 🏩 love_hotel   🏪 convenience_store 🏫 school   🏬 department_store 🏭 factory   🏯 japanese_castle 🏰 european_castle   💒 wedding 🗼 tokyo_tower   🗽 statue_of_liberty      宗教建筑    图标 代码 图标 代码     ⛪ church 🕌 mosque   🕍 synagogue ⛩️ shinto_shrine   🕋 kaaba      其它地点    图标 代码 图标 代码     ⛲ fountain ⛺ tent   🌁 foggy 🌃 night_with_stars   🏙️ cityscape 🌄 sunrise_over_mountains   🌅 sunrise 🌆 city_sunset   🌇 city_sunrise 🌉 bridge_at_night   ♨️ hotsprings 🎠 carousel_horse   🎡 ferris_wheel 🎢 roller_coaster   💈 barber 🎪 circus_tent    陆路运输    图标 代码 图标 代码     🚂 steam_locomotive 🚃 railway_car   🚄 bullettrain_side 🚅 bullettrain_front   🚆 train2 🚇 metro   🚈 light_rail 🚉 station   🚊 tram 🚝 monorail   🚞 mountain_railway 🚋 train   🚌 bus 🚍 oncoming_bus   🚎 trolleybus 🚐 minibus   🚑 ambulance 🚒 fire_engine   🚓 police_car 🚔 oncoming_police_car   🚕 taxi 🚖 oncoming_taxi   🚗 car red_car 🚘 oncoming_automobile   🚙 blue_car 🚚 truck   🚛 articulated_lorry 🚜 tractor   🏎️ racing_car 🏍 motorcycle   🛵 motor_scooter 🚲 bike   🛴 kick_scooter 🚏 busstop   🛣️ motorway 🛤️ railway_track   🛢️ oil_drum ⛽ fuelpump   🚨 rotating_light 🚥 traffic_light   🚦 vertical_traffic_light 🛑 stop_sign   🚧 construction      水路运输    图标 代码 图标 代码     ⚓ anchor ⛵ boat sailboat   🛶 canoe 🚤 speedboat   🛳️ passenger_ship ⛴️ ferry   🛥️ motor_boat 🚢 ship    空中运输    图标 代码 图标 代码     ✈️ airplane 🛩️ small_airplane   🛫 flight_departure 🛬 flight_arrival   💺 seat 🚁 helicopter   🚟 suspension_railway 🚠 mountain_cableway   🚡 aerial_tramway 🛰️ artificial_satellite   🚀 rocket      旅馆    icon code icon code     🛎️ bellhop_bell      时间    图标 代码 图标 代码     ⌛ hourglass ⏳ hourglass_flowing_sand   ⌚ watch ⏰ alarm_clock   ⏱️ stopwatch ⏲️ timer_clock   🕰️ mantelpiece_clock 🕛 clock12   🕧 clock1230 🕐 clock1   🕜 clock130 🕑 clock2   🕝 clock230 🕒 clock3   🕞 clock330 🕓 clock4   🕟 clock430 🕔 clock5   🕠 clock530 🕕 clock6   🕡 clock630 🕖 clock7   🕢 clock730 🕗 clock8   🕣 clock830 🕘 clock9   🕤 clock930 🕙 clock10   🕥 clock1030 🕚 clock11   🕦 clock1130      天空与天气    图标 代码 图标 代码     🌑 new_moon 🌒 waxing_crescent_moon   🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon   🌕 full_moon 🌖 waning_gibbous_moon   🌗 last_quarter_moon 🌘 waning_crescent_moon   🌙 crescent_moon 🌚 new_moon_with_face   🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face   🌡️ thermometer ☀️ sunny   🌝 full_moon_with_face 🌞 sun_with_face   ⭐ star 🌟 star2   🌠 stars 🌌 milky_way   ☁️ cloud ⛅ partly_sunny   ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud   🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud   🌧 cloud_with_rain 🌨 cloud_with_snow   🌩 cloud_with_lightning 🌪️ tornado   🌫️ fog 🌬 wind_face   🌀 cyclone 🌈 rainbow   🌂 closed_umbrella ☂️ open_umbrella   ☂️ umbrella ⛱️ parasol_on_ground   ⚡ zap ❄️ snowflake   ☃️ snowman_with_snow ☃️ snowman   ☄️ comet 🔥 fire   💧 droplet 🌊 ocean    活动 事件    图标 代码 图标 代码     🎃 jack_o_lantern 🎄 christmas_tree   🎆 fireworks 🎇 sparkler   ✨ sparkles 🎈 balloon   🎉 tada 🎊 confetti_ball   🎋 tanabata_tree 🎍 bamboo   🎎 dolls 🎏 flags   🎐 wind_chime 🎑 rice_scene   🎀 ribbon 🎁 gift   🎗️ reminder_ribbon 🎟 tickets   🎫 ticket      奖杯与奖牌    图标 代码 图标 代码     🎖️ medal_military 🏆 trophy   🏅 medal_sports 🥇 1st_place_medal   🥈 2nd_place_medal 🥉 3rd_place_medal    体育运动    图标 代码 图标 代码     ⚽ soccer ⚾ baseball   🏀 basketball 🏐 volleyball   🏈 football 🏉 rugby_football   🎾 tennis 🎳 bowling   🦗 cricket 🏑 field_hockey   🏒 ice_hockey 🏓 ping_pong   🏸 badminton 🥊 boxing_glove   🥋 martial_arts_uniform 🥅 goal_net   ⛳ golf ⛸️ ice_skate   🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash   🎿 ski      游戏    图标 代码 图标 代码     🎯 dart 🎱 8ball   🔮 crystal_ball 🎮 video_game   🕹️ joystick 🎰 slot_machine   🎲 game_die ♠️ spades   ♥️ hearts ♦️ diamonds   ♣️ clubs 🃏 black_joker   🀄 mahjong 🎴 flower_playing_cards    艺术与工艺    图标 代码 图标 代码     🎭 performing_arts 🖼 framed_picture   🎨 art      物品 服装    图标 代码 图标 代码     👓 eyeglasses 🕶️ dark_sunglasses   👔 necktie 👕 shirt tshirt   👖 jeans 👗 dress   👘 kimono 👙 bikini   👚 womans_clothes 👛 purse   👜 handbag 👝 pouch   🛍️ shopping 🎒 school_satchel   👞 mans_shoe shoe 👟 athletic_shoe   👠 high_heel 👡 sandal   👢 boot 👑 crown   👒 womans_hat 🎩 tophat   🎓 mortar_board ⛑️ rescue_worker_helmet   📿 prayer_beads 💄 lipstick   💍 ring 💎 gem    声音    图标 代码 图标 代码     🔇 mute 🔈 speaker   🔉 sound 🔊 loud_sound   📢 loudspeaker 📣 mega   📯 postal_horn 🔔 bell   🔕 no_bell      音乐    图标 代码 图标 代码     🎼 musical_score 🎵 musical_note   🎶 notes 🎙️ studio_microphone   🎚️ level_slider 🎛️ control_knobs   🎤 microphone 🎧 headphones   📻 radio      乐器    图标 代码 图标 代码     🎷 saxophone 🎸 guitar   🎹 musical_keyboard 🎺 trumpet   🎻 violin 🥁 drum    电话    图标 代码 图标 代码     📱 iphone 📲 calling   ☎️ phone telephone 📞 telephone_receiver   📟 pager 📠 fax    电脑    图标 代码 图标 代码     🔋 battery 🔌 electric_plug   💻 computer 🖥️ desktop_computer   🖨️ printer ⌨️ keyboard   🖱 computer_mouse 🖲️ trackball   💽 minidisc 💾 floppy_disk   💿 cd 📀 dvd    灯光与影像    图标 代码 图标 代码     🎥 movie_camera 🎞️ film_strip   📽️ film_projector 🎬 clapper   📺 tv 📷 camera   📸 camera_flash 📹 video_camera   📼 vhs 🔍 mag   🔎 mag_right 🕯️ candle   💡 bulb 🔦 flashlight   🏮 izakaya_lantern lantern      书与纸张    图标 代码 图标 代码     📔 notebook_with_decorative_cover 📕 closed_book   📖 book open_book 📗 green_book   📘 blue_book 📙 orange_book   📚 books 📓 notebook   📒 ledger 📃 page_with_curl   📜 scroll 📄 page_facing_up   📰 newspaper 🗞️ newspaper_roll   📑 bookmark_tabs 🔖 bookmark   🏷️ label      钱    图标 代码 图标 代码     💰 moneybag 💴 yen   💵 dollar 💶 euro   💷 pound 💸 money_with_wings   💳 credit_card 💹 chart    邮件    图标 代码 图标 代码     ✉️ email envelope 📧 📧   📨 incoming_envelope 📩 envelope_with_arrow   📤 outbox_tray 📥 inbox_tray   📦 package 📫 mailbox   📪 mailbox_closed 📬 mailbox_with_mail   📭 mailbox_with_no_mail 📮 postbox   🗳 ballot_box      书写    图标 代码 图标 代码     ✏️ pencil2 ✒️ black_nib   🖋 fountain_pen 🖊 pen   🖌 paintbrush 🖍 crayon   📝 memo pencil      办公    图标 代码 图标 代码     💼 briefcase 📁 file_folder   📂 open_file_folder 🗂️ card_index_dividers   📅 date 📆 calendar   🗒 spiral_notepad 🗓 spiral_calendar   📇 card_index 📈 chart_with_upwards_trend   📉 chart_with_downwards_trend 📊 bar_chart   📋 clipboard 📌 pushpin   📍 round_pushpin 📎 paperclip   🖇 paperclips 📏 straight_ruler   📐 triangular_ruler ✂️ scissors   🗃️ card_file_box 🗄️ file_cabinet   🗑️ wastebasket      锁    图标 代码 图标 代码     🔒 lock 🔓 unlock   🔏 lock_with_ink_pen 🔐 closed_lock_with_key   🔑 key 🗝️ old_key    工具    图标 代码 图标 代码     🔨 hammer ⛏️ pick   ⚒️ hammer_and_pick 🛠️ hammer_and_wrench   🗡 dagger ⚔️ crossed_swords   🔫 gun 🏹 bow_and_arrow   🛡️ shield 🔧 wrench   🔩 nut_and_bolt ⚙️ gear   🗜 clamp ⚖ balance_scale   🔗 link ⛓️ chains    科学    图标 代码 图标 代码     ⚗️ alembic 🔬 microscope   🔭 telescope 🛰️ satellite    医疗    图标 代码 图标 代码     💉 syringe 💊 pill    生活用品    图标 代码 图标 代码     🚪 door 🛏️ bed   🛋️ couch_and_lamp 🚽 toilet   🚿 shower 🛁 bathtub   🛒 shopping_cart      其它物品    图标 代码 图标 代码     🚬 smoking ⚰️ coffin   ⚱️ funeral_urn 🗿 moyai    符号 交通标识    图标 代码 图标 代码     🏧 atm 🚮 put_litter_in_its_place   🚰 potable_water ♿ wheelchair   🚹 mens 🚺 womens   🚻 restroom 🚼 baby_symbol   🚾 wc 🛂 passport_control   🛃 customs 🛄 baggage_claim   🛅 left_luggage      警告    图标 代码 图标 代码     ⚠️ warning 🚸 children_crossing   ⛔ no_entry 🚫 no_entry_sign   🚳 no_bicycles 🚭 no_smoking   🚯 do_not_litter 🚱 🚱   🚷 no_pedestrians 📵 no_mobile_phones   🔞 underage ☢ radioactive   ☣ biohazard      箭头    图标 代码 图标 代码     ⬆️ arrow_up ↗️ arrow_upper_right   ➡️ arrow_right ↘️ arrow_lower_right   ⬇️ arrow_down ↙️ arrow_lower_left   ⬅️ arrow_left ↖️ arrow_upper_left   ↕️ arrow_up_down ↔️ left_right_arrow   ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook   ⤴️ arrow_heading_up ⤵️ arrow_heading_down   🔃 arrows_clockwise 🔄 arrows_counterclockwise   🔙 back 🔚 end   🔛 on 🔜 soon   🔝 top      宗教    图标 代码 图标 代码     🛐 place_of_worship ⚛️ atom_symbol   🕉 om ✡️ star_of_david   ☸️ wheel_of_dharma ☯️ yin_yang   ✝️ latin_cross ☦️ orthodox_cross   ☪️ star_and_crescent ☮️ peace_symbol   🕎 menorah 🔯 six_pointed_star    生肖    图标 代码 图标 代码     ♈ aries ♉ taurus   ♊ gemini ♋ cancer   ♌ leo ♍ virgo   ♎ libra ♏ scorpius   ♐ sagittarius ♑ capricorn   ♒ aquarius ♓ pisces   ⛎ ophiuchus      影像符号    图标 代码 图标 代码     🔀 twisted_rightwards_arrows 🔁 repeat   🔂 repeat_one ▶️ arrow_forward   ⏩ fast_forward ⏭ next_track_button   ⏯ play_or_pause_button ◀️ arrow_backward   ⏪ rewind ⏮️ previous_track_button   🔼 arrow_up_small ⏫ arrow_double_up   🔽 arrow_down_small ⏬ arrow_double_down   ⏸ pause_button ⏹ stop_button   ⏺ record_button 🎦 cinema   🔅 low_brightness 🔆 high_brightness   📶 signal_strength 📳 vibration_mode   📴 mobile_phone_off      数学    图标 代码 图标 代码     ✖️ heavy_multiplication_x ➕ heavy_plus_sign   ➖ heavy_minus_sign ➗ heavy_division_sign    标点符号    图标 代码 图标 代码     ‼️ bangbang ⁉️ interrobang   ❓ question ❔ grey_question   ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark   〰️ wavy_dash      货币    图标 代码 图标 代码     💱 currency_exchange 💲 heavy_dollar_sign    按键符号    图标 代码 图标 代码     #️⃣ hash *️⃣ asterisk   0️⃣ zero 1️⃣ one   2️⃣ two 3️⃣ three   4️⃣ four 5️⃣ five   6️⃣ six 7️⃣ seven   8️⃣ eight 9️⃣ nine   🔟 keycap_ten      字母符号    图标 代码 图标 代码     🔠 capital_abcd 🔡 abcd   🔢 1234 🔣 symbols   🔤 abc 🅰️ a   🆎 ab 🅱️ b   🆑 cl 🆒 cool   🆓 free ℹ️ information_source   🆔 id ⓜ️ m   🆕 new 🆖 ng   🅾️ o2 🆗 ok   🅿️ parking 🆘 sos   🆙 up 🆚 vs   🈁 koko 🈂️ sa   🈷️ u6708 🈶 u6709   🈯 u6307 🉐 ideograph_advantage   🈹 u5272 🈚 u7121   🈲 u7981 🉑 accept   🈸 u7533 🈴 u5408   🈳 u7a7a ㊗️ congratulations   ㊙️ secret 🈺 u55b6   🈵 u6e80      几何符号    图标 代码 图标 代码     🔴 red_circle 🔵 large_blue_circle   ⚫ black_circle ⚪ white_circle   ⬛ black_large_square ⬜ white_large_square   ◼️ black_medium_square ◻️ white_medium_square   ◾ black_medium_small_square ◽ white_medium_small_square   ▪️ black_small_square ▫️ white_small_square   🔶 large_orange_diamond 🔷 large_blue_diamond   🔸 small_orange_diamond 🔹 small_blue_diamond   🔺 small_red_triangle 🔻 small_red_triangle_down   💠 diamond_shape_with_a_dot_inside 🔘 radio_button   🔳 white_square_button 🔲 black_square_button    其它符合    图标 代码 图标 代码     ♻️ recycle ⚜️ fleur_de_lis   🔱 trident 📛 name_badge   🔰 beginner ⭕ o   ✅ white_check_mark ☑️ ballot_box_with_check   ✔️ heavy_check_mark ❌ x   ❎ negative_squared_cross_mark ➰ curly_loop   ➿ loop 〽️ part_alternation_mark   ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star   ❇️ sparkle ©️ copyright   ®️ registered ™️ tm    旗帜 常用旗帜    图标 代码 图标 代码     🏁 checkered_flag 🚩 triangular_flag_on_post   🎌 crossed_flags 🏴 black_flag   🏳 white_flag 🏳️‍🌈 rainbow_flag    国家和地区旗帜    图标 代码 图标 代码     🇦🇩 andorra 🇦🇪 united_arab_emirates   🇦🇫 afghanistan 🇦🇬 antigua_barbuda   🇦🇮 anguilla 🇦🇱 albania   🇦🇲 armenia 🇦🇴 angola   🇦🇶 antarctica 🇦🇷 argentina   🇦🇸 american_samoa 🇦🇹 austria   🇦🇺 australia 🇦🇼 aruba   🇦🇽 aland_islands 🇦🇿 azerbaijan   🇧🇦 bosnia_herzegovina 🇧🇧 barbados   🇧🇩 bangladesh 🇧🇪 belgium   🇧🇫 burkina_faso 🇧🇬 bulgaria   🇧🇭 bahrain 🇧🇮 burundi   🇧🇯 benin 🇧🇱 st_barthelemy   🇧🇲 bermuda 🇧🇳 brunei   🇧🇴 bolivia 🇧🇶 caribbean_netherlands   🇧🇷 brazil 🇧🇸 bahamas   🇧🇹 bhutan 🇧🇼 botswana   🇧🇾 belarus 🇧🇿 belize   🇨🇦 canada 🇨🇨 cocos_islands   🇨🇩 congo_kinshasa 🇨🇫 central_african_republic   🇨🇬 congo_brazzaville 🇨🇭 switzerland   🇨🇮 cote_divoire 🇨🇰 cook_islands   🇨🇱 chile 🇨🇲 cameroon   🇨🇳 cn 🇨🇴 colombia   🇨🇷 costa_rica 🇨🇺 cuba   🇨🇻 cape_verde 🇨🇼 curacao   🇨🇽 christmas_island 🇨🇾 cyprus   🇨🇿 czech_republic 🇩🇪 de   🇩🇯 djibouti 🇩🇰 denmark   🇩🇲 dominica 🇩🇴 dominican_republic   🇩🇿 algeria 🇪🇨 ecuador   🇪🇪 estonia 🇪🇬 egypt   🇪🇭 western_sahara 🇪🇷 eritrea   🇪🇸 es 🇪🇹 ethiopia   🇪🇺 eu european_union 🇫🇮 finland   🇫🇯 fiji 🇫🇰 falkland_islands   🇫🇲 micronesia 🇫🇴 faroe_islands   🇫🇷 fr 🇬🇦 gabon   🇬🇧 gb uk 🇬🇩 grenada   🇬🇪 georgia 🇬🇫 french_guiana   🇬🇬 guernsey 🇬🇭 ghana   🇬🇮 gibraltar 🇬🇱 greenland   🇬🇲 gambia 🇬🇳 guinea   🇬🇵 guadeloupe 🇬🇶 equatorial_guinea   🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands   🇬🇹 guatemala 🇬🇺 guam   🇬🇼 guinea_bissau 🇬🇾 guyana   🇭🇰 hong_kong 🇭🇳 honduras   🇭🇷 croatia 🇭🇹 haiti   🇭🇺 hungary 🇮🇨 canary_islands   🇮🇩 indonesia 🇮🇪 ireland   🇮🇱 israel 🇮🇲 isle_of_man   🇮🇳 india 🇮🇴 british_indian_ocean_territory   🇮🇶 iraq 🇮🇷 iran   🇮🇸 iceland 🇮🇹 it   🇯🇪 jersey 🇯🇲 jamaica   🇯🇴 jordan 🇯🇵 jp   🇰🇪 kenya 🇰🇬 kyrgyzstan   🇰🇭 cambodia 🇰🇮 kiribati   🇰🇲 comoros 🇰🇳 st_kitts_nevis   🇰🇵 north_korea 🇰🇷 kr   🇰🇼 kuwait 🇰🇾 cayman_islands   🇰🇿 kazakhstan 🇱🇦 laos   🇱🇧 lebanon 🇱🇨 st_lucia   🇱🇮 liechtenstein 🇱🇰 sri_lanka   🇱🇷 liberia 🇱🇸 lesotho   🇱🇹 lithuania 🇱🇺 luxembourg   🇱🇻 latvia 🇱🇾 libya   🇲🇦 morocco 🇲🇨 monaco   🇲🇩 moldova 🇲🇪 montenegro   🇲🇬 madagascar 🇲🇭 marshall_islands   🇲🇰 macedonia 🇲🇱 mali   🇲🇲 myanmar 🇲🇳 mongolia   🇲🇴 macau 🇲🇵 northern_mariana_islands   🇲🇶 martinique 🇲🇷 mauritania   🇲🇸 montserrat 🇲🇹 malta   🇲🇺 mauritius 🇲🇻 maldives   🇲🇼 malawi 🇲🇽 mexico   🇲🇾 malaysia 🇲🇿 mozambique   🇳🇦 namibia 🇳🇨 new_caledonia   🇳🇪 niger 🇳🇫 norfolk_island   🇳🇬 nigeria 🇳🇮 nicaragua   🇳🇱 netherlands 🇳🇴 norway   🇳🇵 nepal 🇳🇷 nauru   🇳🇺 niue 🇳🇿 new_zealand   🇴🇲 oman 🇵🇦 panama   🇵🇪 peru 🇵🇫 french_polynesia   🇵🇬 papua_new_guinea 🇵🇭 philippines   🇵🇰 pakistan 🇵🇱 poland   🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands   🇵🇷 puerto_rico 🇵🇸 palestinian_territories   🇵🇹 portugal 🇵🇼 palau   🇵🇾 paraguay 🇶🇦 qatar   🇷🇪 reunion 🇷🇴 romania   🇷🇸 serbia 🇷🇺 ru   🇷🇼 rwanda 🇸🇦 saudi_arabia   🇸🇧 solomon_islands 🇸🇨 seychelles   🇸🇩 sudan 🇸🇪 sweden   🇸🇬 singapore 🇸🇭 st_helena   🇸🇮 slovenia 🇸🇰 slovakia   🇸🇱 sierra_leone 🇸🇲 san_marino   🇸🇳 senegal 🇸🇴 somalia   🇸🇷 suriname 🇸🇸 south_sudan   🇸🇹 sao_tome_principe 🇸🇻 el_salvador   🇸🇽 sint_maarten 🇸🇾 syria   🇸🇿 swaziland 🇹🇨 turks_caicos_islands   🇹🇩 chad 🇹🇫 french_southern_territories   🇹🇬 togo 🇹🇭 thailand   🇹🇯 tajikistan 🇹🇰 tokelau   🇹🇱 timor_leste 🇹🇲 turkmenistan   🇹🇳 tunisia 🇹🇴 tonga   🇹🇷 tr 🇹🇹 trinidad_tobago   🇹🇻 tuvalu 🇹🇼 taiwan   🇹🇿 tanzania 🇺🇦 ukraine   🇺🇬 uganda 🇺🇸 us   🇺🇾 uruguay 🇺🇿 uzbekistan   🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines   🇻🇪 venezuela 🇻🇬 british_virgin_islands   🇻🇮 us_virgin_islands 🇻🇳 vietnam   🇻🇺 vanuatu 🇼🇫 wallis_futuna   🇼🇸 samoa 🇽🇰 kosovo   🇾🇪 yemen 🇾🇹 mayotte   🇿🇦 south_africa 🇿🇲 zambia   🇿🇼 zimbabwe      参考链接  emoji-support ","permalink":"http://fmx789.github.io/posts/emoji-list.html/","tags":["emoji"],"title":"Emoji符号清单"},{"categories":["Hugo"],"contents":"内置Shortcodes figure figure 的文档\nfigure shortcode 有以下命名参数：\n  src [必需] (第一个位置参数)\n图片的 URL。\n  alt [可选]\n图片无法显示时的替代文本， 默认值是 src 参数的值。\n支持 Markdown 或者 HTML 格式。\n  caption [可选]\n图片说明。\n支持 Markdown 或者 HTML 格式。\n  title [可选]\n图片标题。\n  class [可选]\nHTML figure 标签的 class 属性。\n  height [可选]\n图片的 height 属性。\n  width [可选]\n图片的 width 属性。\n  1  {{\u0026lt; figure src=\u0026#34;/images/pexels.jpg\u0026#34; title=\u0026#34;lake\u0026#34; \u0026gt;}}   输出效果为：\n  lake   注意  更详细的插入图片用法请见此处。   gist 可以引用GitHub里的代码。\ngist 的文档\n假设网址中存在gist：\n1  https://gist.github.com/spf13/7896402   可以通过URL获得的用户名和gist ID嵌入到内容中：\n1  {{\u0026lt; gist spf13 7896402 \u0026gt;}}   输出效果为：\n \nhighlight highlight 的文档，效果跟围栏代码块很像。\n1 2 3 4 5 6 7 8 9 10  {{\u0026lt; highlight html \u0026gt;}} \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34;}} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{\u0026lt; /highlight \u0026gt;}}   输出效果为：\n1 2 3 4 5 6 7 8  \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34;}} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;   \nref和relref 用于交叉引用文档。\nref 和 relref 的文档\n1 2 3 4 5 6  {{\u0026lt; ref \u0026#34;document.md\u0026#34; \u0026gt;}} {{\u0026lt; ref \u0026#34;document.md#anchor\u0026#34; \u0026gt;}} {{\u0026lt; ref \u0026#34;/blog/my-post.md\u0026#34; \u0026gt;}} {{\u0026lt; relref \u0026#34;document.md\u0026#34; \u0026gt;}} {{\u0026lt; relref \u0026#34;/blog/my-post.md\u0026#34; \u0026gt;}} [markdown语法]({{\u0026lt; ref \u0026#34;markdownGrammer.md\u0026#34; \u0026gt;}} \u0026#34;测试\u0026#34;)   以第六行为例效果为：\nmarkdown语法\n这将会跳转到名为markdown语法的文章。\n主题Shortcodes style 支持 :(fab fa-sass fa-fw): SASS 中的嵌套语法。\n1 2 3  {{\u0026lt; style \u0026#34;text-align:right; strong{color:#00b1ff;}\u0026#34; \u0026gt;}} This is a **right-aligned** paragraph. {{\u0026lt; /style \u0026gt;}}   输出效果为：\nThis is a right-aligned paragraph. \nlink link shortcode 有以下命名参数：\n  href [必需] (第一个位置参数)\n链接的目标。\n  content [可选] (第二个位置参数)\n链接的内容，默认值是 href 参数的值。\n支持 Markdown 或者 HTML 格式。\n  title [可选] (第三个位置参数)\nHTML a 标签 的 title 属性，当悬停在链接上会显示的提示。\n  rel [可选]\nHTML a 标签 的 rel 补充属性。\n  class [可选]\nHTML a 标签 的 class 属性。\n  1 2 3  {{\u0026lt; link \u0026#34;https://fmx789.github.io\u0026#34; 我的博客 \u0026gt;}} 或者 {{\u0026lt; link href=\u0026#34;https://fmx789.github.io\u0026#34; content=我的博客 title=\u0026#34;KevinFan的博客\u0026#34; \u0026gt;}}   输出效果为：\n我的博客 admonition admonition有三个参数：\n type [必需]\t默认值是note title [可选] 默认值是 type 参数的值 open [可选]\t横幅内容是否默认展开, 默认值是 true  1 2 3  {{\u0026lt; admonition tip \u0026#34;This is a tip\u0026#34; false \u0026gt;}} 一个 **技巧** 横幅 {{\u0026lt; /admonition \u0026gt;}}   注意\n1 2 3  {{\u0026lt; admonition \u0026gt;}} 一个 **注意** 横幅 {{\u0026lt; /admonition \u0026gt;}}   注意  一个 注意 横幅   摘要\n1 2 3  {{\u0026lt; admonition abstract \u0026gt;}} 一个 **摘要** 横幅 {{\u0026lt; /admonition \u0026gt;}}   摘要  一个 摘要 横幅   信息\n1 2 3  {{\u0026lt; admonition info \u0026gt;}} 一个 **信息** 横幅 {{\u0026lt; /admonition \u0026gt;}}   信息  一个 信息 横幅   技巧\n1 2 3  {{\u0026lt; admonition tip \u0026gt;}} 一个 **技巧** 横幅 {{\u0026lt; /admonition \u0026gt;}}   技巧  一个 技巧 横幅   成功\n1 2 3  {{\u0026lt; admonition success \u0026gt;}} 一个 **成功** 横幅 {{\u0026lt; /admonition \u0026gt;}}   成功  一个 成功 横幅   问题\n1 2 3  {{\u0026lt; admonition question \u0026gt;}} 一个 **问题** 横幅 {{\u0026lt; /admonition \u0026gt;}}   问题  一个 问题 横幅   警告\n1 2 3  {{\u0026lt; admonition warning \u0026gt;}} 一个 **警告** 横幅 {{\u0026lt; /admonition \u0026gt;}}   警告  一个 警告 横幅   失败\n1 2 3  {{\u0026lt; admonition failure \u0026gt;}} 一个 **失败** 横幅 {{\u0026lt; /admonition \u0026gt;}}   失败  一个 失败 横幅   危险\n1 2 3  {{\u0026lt; admonition danger \u0026gt;}} 一个 **危险** 横幅 {{\u0026lt; /admonition \u0026gt;}}   危险  一个 危险 横幅   Bug\n1 2 3  {{\u0026lt; admonition bug \u0026gt;}} 一个 **Bug** 横幅 {{\u0026lt; /admonition \u0026gt;}}   Bug  一个 Bug 横幅   示例\n1 2 3  {{\u0026lt; admonition example \u0026gt;}} 一个 **示例** 横幅 {{\u0026lt; /admonition \u0026gt;}}   示例  一个 示例 横幅   引用\n1 2 3  {{\u0026lt; admonition quote \u0026gt;}} 一个 **引用** 横幅 {{\u0026lt; /admonition \u0026gt;}}   引用  一个 引用 横幅   \nimage image shortcode 有以下命名参数：\n  src [必需] (第一个位置参数)\n图片的 URL。\n  alt [可选] (第二个位置参数)\n图片无法显示时的替代文本， 默认值是 src 参数的值。\n支持 Markdown 或者 HTML 格式。\n  caption [可选] (第三个位置参数)\n图片标题。\n支持 Markdown 或者 HTML 格式。\n  title [可选]\n当悬停在图片上会显示的提示。\n  class [可选]\nHTML figure 标签的 class 属性。\n  src_s [可选]\n图片缩略图的 URL，用在画廊模式中， 默认值是 src 参数的值。\n  src_l [可选]\n高清图片的 URL，用在画廊模式中, 默认值是 src 参数的值。\n  height [可选]\n图片的 height 属性。\n  width [可选]\n图片的 width 属性。\n  linked [可选]\n图片是否需要被链接，默认值是 true。\n  rel [可选]\nHTML a 标签 的 rel 补充属性，仅在 linked 属性设置成 true 时有效。\n  1  {{\u0026lt; image src=\u0026#34;/images/pexels.jpg\u0026#34; caption=\u0026#34;Lighthouse (`image`)\u0026#34; src_s=\u0026#34;/images/pexels-small.jpg\u0026#34; src_l=\u0026#34;/images/pexels-large.jpg\u0026#34; \u0026gt;}}   mermaid mermaid 是一个可以帮助你在文章中生成图表和流程图的库，类似 Markdown 的语法。\n流程图\n1 2 3 4 5 6 7  {{\u0026lt; mermaid \u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}}   时序图\n1 2 3 4 5 6 7 8 9 10 11 12 13  {{\u0026lt; mermaid \u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! {{\u0026lt; /mermaid \u0026gt;}}   甘特图\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  {{\u0026lt; mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u0026lt; /mermaid \u0026gt;}}   状态图\n1 2 3 4 5 6 7 8 9  {{\u0026lt; mermaid \u0026gt;}} stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] {{\u0026lt; /mermaid \u0026gt;}}   Git图\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  {{\u0026lt; mermaid \u0026gt;}} gitGraph: options { \u0026#34;nodeSpacing\u0026#34;: 100, \u0026#34;nodeRadius\u0026#34;: 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u0026lt; /mermaid \u0026gt;}}   饼图\n1 2 3 4 5 6  {{\u0026lt; mermaid \u0026gt;}} pie \u0026#34;Dogs\u0026#34; : 386 \u0026#34;Cats\u0026#34; : 85 \u0026#34;Rats\u0026#34; : 15 {{\u0026lt; /mermaid \u0026gt;}}   echarts ECharts 提供了常规的 折线图，柱状图，散点图，饼图，K线图，用于统计的 盒形图，用于地理数据可视化的 地图，热力图，线图，用于关系数据可视化的 关系图， treemap，旭日图，多维数据可视化的 平行坐标，还有用于 BI 的 漏斗图，仪表盘，并且支持图与图之间的混搭。\necharts shortcode 还有以下命名参数:\n  width [可选] (第一个位置参数)\n数据可视化的宽度，默认值是 100%。\n  height [可选] (第二个位置参数)\n数据可视化的高度，默认值是 30rem。\n  一个 JSON 格式的 echarts 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70  {{\u0026lt; echarts \u0026gt;}} { \u0026#34;title\u0026#34;: { \u0026#34;text\u0026#34;: \u0026#34;折线统计图\u0026#34;, \u0026#34;top\u0026#34;: \u0026#34;2%\u0026#34;, \u0026#34;left\u0026#34;: \u0026#34;center\u0026#34; }, \u0026#34;tooltip\u0026#34;: { \u0026#34;trigger\u0026#34;: \u0026#34;axis\u0026#34; }, \u0026#34;legend\u0026#34;: { \u0026#34;data\u0026#34;: [\u0026#34;邮件营销\u0026#34;, \u0026#34;联盟广告\u0026#34;, \u0026#34;视频广告\u0026#34;, \u0026#34;直接访问\u0026#34;, \u0026#34;搜索引擎\u0026#34;], \u0026#34;top\u0026#34;: \u0026#34;10%\u0026#34; }, \u0026#34;grid\u0026#34;: { \u0026#34;left\u0026#34;: \u0026#34;5%\u0026#34;, \u0026#34;right\u0026#34;: \u0026#34;5%\u0026#34;, \u0026#34;bottom\u0026#34;: \u0026#34;5%\u0026#34;, \u0026#34;top\u0026#34;: \u0026#34;20%\u0026#34;, \u0026#34;containLabel\u0026#34;: true }, \u0026#34;toolbox\u0026#34;: { \u0026#34;feature\u0026#34;: { \u0026#34;saveAsImage\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;保存为图片\u0026#34; } } }, \u0026#34;xAxis\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;category\u0026#34;, \u0026#34;boundaryGap\u0026#34;: false, \u0026#34;data\u0026#34;: [\u0026#34;周一\u0026#34;, \u0026#34;周二\u0026#34;, \u0026#34;周三\u0026#34;, \u0026#34;周四\u0026#34;, \u0026#34;周五\u0026#34;, \u0026#34;周六\u0026#34;, \u0026#34;周日\u0026#34;] }, \u0026#34;yAxis\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;value\u0026#34; }, \u0026#34;series\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;邮件营销\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;stack\u0026#34;: \u0026#34;总量\u0026#34;, \u0026#34;data\u0026#34;: [120, 132, 101, 134, 90, 230, 210] }, { \u0026#34;name\u0026#34;: \u0026#34;联盟广告\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;stack\u0026#34;: \u0026#34;总量\u0026#34;, \u0026#34;data\u0026#34;: [220, 182, 191, 234, 290, 330, 310] }, { \u0026#34;name\u0026#34;: \u0026#34;视频广告\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;stack\u0026#34;: \u0026#34;总量\u0026#34;, \u0026#34;data\u0026#34;: [150, 232, 201, 154, 190, 330, 410] }, { \u0026#34;name\u0026#34;: \u0026#34;直接访问\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;stack\u0026#34;: \u0026#34;总量\u0026#34;, \u0026#34;data\u0026#34;: [320, 332, 301, 334, 390, 330, 320] }, { \u0026#34;name\u0026#34;: \u0026#34;搜索引擎\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;stack\u0026#34;: \u0026#34;总量\u0026#34;, \u0026#34;data\u0026#34;: [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u0026lt; /echarts \u0026gt;}}   一个 YAML 格式的 echarts 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95  {{\u0026lt; echarts \u0026gt;}}title:text:折线统计图top:2%left:centertooltip:trigger:axislegend:data:- 邮件营销- 联盟广告- 视频广告- 直接访问- 搜索引擎top:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:保存为图片xAxis:type:categoryboundaryGap:falsedata:- 周一- 周二- 周三- 周四- 周五- 周六- 周日yAxis:type:valueseries:- name:邮件营销type:linestack:总量data:- 120- 132- 101- 134- 90- 230- 210- name:联盟广告type:linestack:总量data:- 220- 182- 191- 234- 290- 330- 310- name:视频广告type:linestack:总量data:- 150- 232- 201- 154- 190- 330- 410- name:直接访问type:linestack:总量data:- 320- 332- 301- 334- 390- 330- 320- name:搜索引擎type:linestack:总量data:- 820- 932- 901- 934- 1290- 1330- 1320{{\u0026lt; /echarts \u0026gt;}}  一个 TOML 格式的 echarts 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117  {{\u0026lt; echarts \u0026gt;}} [title] text = \u0026#34;折线统计图\u0026#34; top = \u0026#34;2%\u0026#34; left = \u0026#34;center\u0026#34; [tooltip] trigger = \u0026#34;axis\u0026#34; [legend] data = [ \u0026#34;邮件营销\u0026#34;, \u0026#34;联盟广告\u0026#34;, \u0026#34;视频广告\u0026#34;, \u0026#34;直接访问\u0026#34;, \u0026#34;搜索引擎\u0026#34; ] top = \u0026#34;10%\u0026#34; [grid] left = \u0026#34;5%\u0026#34; right = \u0026#34;5%\u0026#34; bottom = \u0026#34;5%\u0026#34; top = \u0026#34;20%\u0026#34; containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \u0026#34;保存为图片\u0026#34; [xAxis] type = \u0026#34;category\u0026#34; boundaryGap = false data = [ \u0026#34;周一\u0026#34;, \u0026#34;周二\u0026#34;, \u0026#34;周三\u0026#34;, \u0026#34;周四\u0026#34;, \u0026#34;周五\u0026#34;, \u0026#34;周六\u0026#34;, \u0026#34;周日\u0026#34; ] [yAxis] type = \u0026#34;value\u0026#34; [[series]] name = \u0026#34;邮件营销\u0026#34; type = \u0026#34;line\u0026#34; stack = \u0026#34;总量\u0026#34; data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \u0026#34;联盟广告\u0026#34; type = \u0026#34;line\u0026#34; stack = \u0026#34;总量\u0026#34; data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \u0026#34;视频广告\u0026#34; type = \u0026#34;line\u0026#34; stack = \u0026#34;总量\u0026#34; data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \u0026#34;直接访问\u0026#34; type = \u0026#34;line\u0026#34; stack = \u0026#34;总量\u0026#34; data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \u0026#34;搜索引擎\u0026#34; type = \u0026#34;line\u0026#34; stack = \u0026#34;总量\u0026#34; data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u0026lt; /echarts \u0026gt;}}   mapbox mapbox shortcode 有以下命名参数来使用 Mapbox GL JS：\n  lng [必需] (第一个位置参数)\n地图初始中心点的经度，以度为单位。\n  lat [必需] (第二个位置参数)\n地图初始中心点的纬度，以度为单位。\n  zoom [可选] (第三个位置参数)\n地图的初始缩放级别，默认值是 10。\n  marked [可选] (第四个位置参数)\n是否在地图的初始中心点添加图钉，默认值是 true。\n  light-style [可选] (第五个位置参数)\n浅色主题的地图样式。\n  dark-style [可选] (第六个位置参数)\n深色主题的地图样式。\n  navigation [可选]\n是否添加 NavigationControl。\n  geolocate [可选]\n是否添加 GeolocateControl。\n  scale [可选]\n是否添加 ScaleControl。\n  fullscreen [可选]\n是否添加 FullscreenControl。\n  width [可选]\n地图的宽度，默认值是 100%。\n  height [可选]\n地图的高度，默认值是 20rem。\n  1 2 3  {{\u0026lt; mapbox -122.252 37.453 10 false \u0026#34;mapbox://styles/mapbox/streets-zh-v1\u0026#34; \u0026gt;}} 或者 {{\u0026lt; mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\u0026#34;mapbox://styles/mapbox/streets-zh-v1\u0026#34; \u0026gt;}}   music 自定义音乐URL\nmusic shortcode 有以下命名参数来使用自定义音乐 URL：\n  server [必需]\n音乐的链接。\n  type [可选]\n音乐的名称。\n  artist [可选]\n音乐的创作者。\n  cover [可选]\n音乐的封面链接。\n  1  {{\u0026lt; music url=\u0026#34;/music/Wavelength.mp3\u0026#34; name=Wavelength artist=oldmanyoung cover=\u0026#34;/images/Wavelength.jpg\u0026#34; \u0026gt;}}   音乐平台URL\n  auto [必需]] (第一个位置参数)\n用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台。歌单播放形式。\n  1 2 3  {{\u0026lt; music auto=\u0026#34;https://music.163.com/#/playlist?id=2829816518\u0026#34; \u0026gt;}} 或者 {{\u0026lt; music \u0026#34;https://music.163.com/#/playlist?id=2829816518\u0026#34; \u0026gt;}}   自定义音乐平台，类型和ID\n  server [必需] (第一个位置参数)\n[netease, tencent, kugou, xiami, baidu]\n音乐平台。\n  type [必需] (第二个位置参数)\n[song, playlist, album, search, artist]\n音乐类型。\n  id [必需] (第三个位置参数)\n歌曲 ID，或者播放列表 ID，或者专辑 ID，或者搜索关键词，或者创作者 ID。\n  1 2 3  {{\u0026lt; music server=\u0026#34;netease\u0026#34; type=\u0026#34;song\u0026#34; id=\u0026#34;1446764662\u0026#34; \u0026gt;}} 或者 {{\u0026lt; music netease song 1446764662 \u0026gt;}}   可选参数\n  theme [可选]\n 音乐播放器的主题色，默认值是 #448aff。\n  fixed [可选]\n是否开启固定模式，默认值是 false。\n  mini [可选]\n是否开启迷你模式，默认值是 false。\n  autoplay [可选]\n是否自动播放音乐，默认值是 false。\n  volume [可选]\n第一次打开播放器时的默认音量，会被保存在浏览器缓存中，默认值是 0.7。\n  mutex [可选]\n是否自动暂停其它播放器，默认值是 true。\n  此外，针对歌单形式的音乐，还有以下可选参数：\n  loop [可选]\n[all, one, none]\n音乐列表的循环模式，默认值是 none。\n  order [可选]\n[list, random]\n音乐列表的播放顺序，默认值是 list。\n  list-folded [可选]\n初次打开的时候音乐列表是否折叠，默认值是 false。\n  list-max-height [可选]\n音乐列表的最大高度，默认值是 340px。\n  bilibili 只有1P的视频\n1 2 3  {{\u0026lt; bilibili BV1f4411M7QC \u0026gt;}} 或者 {{\u0026lt; bilibili id=BV1f4411M7QC \u0026gt;}}   有多P的视频，则需要制定集数P\n1 2 3  {{\u0026lt; bilibili BV1TJ411C7An 3 \u0026gt;}} 或者 {{\u0026lt; bilibili id=BV1TJ411C7An p=3 \u0026gt;}}   typeit 提供打字动画。\n普通内容\n1 2 3  {{\u0026lt; typeit \u0026gt;}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u0026lt; /typeit \u0026gt;}}   代码内容\n通过使用参数 code 指定语言类型实现语法高亮。\n1 2 3 4 5 6 7  {{\u0026lt; typeit code=java \u0026gt;}} public class HelloWorld { public static void main(String []args) { System.out.println(\u0026#34;Hello World\u0026#34;); } } {{\u0026lt; /typeit \u0026gt;}}   分组内容\n1 2 3 4 5 6 7  {{\u0026lt; typeit group=paragraph \u0026gt;}} **首先**, 这个段落开始 {{\u0026lt; /typeit \u0026gt;}} {{\u0026lt; typeit group=paragraph \u0026gt;}} **然后**, 这个段落开始 {{\u0026lt; /typeit \u0026gt;}}   参考链接   内置shortcode\n  拓展shortcode\n ","permalink":"http://fmx789.github.io/posts/shortcode-grammer.html/","tags":["shortcode","可视化","音乐","视频"],"title":"Shortcode"},{"categories":["Markdown"],"contents":"基本语法 标题 从h1到h6的标题在每个级别依次加一个#：\n1 2 3 4 5 6  # h1 标题 ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题   对应Typora里的快捷键是ctrl+1~6。\n标题 ID  要添加自定义标题 ID，请在与标题相同的行中将自定义 ID 放在花括号中：\n1  ### 一个很棒的标题 {#custom-id}      注释 1 2 3  \u0026lt;!-- 这是一段注释 --\u0026gt;   不能看到以下的注释：\n水平线  ___：三个连续的下划线 ---：三个连续的破折号 ***：三个连续的星号  输出效果为：\n   内联HTML元素 1 2 3  \u0026lt;div class=\u0026#34;class\u0026#34;\u0026gt; 这是 \u0026lt;b\u0026gt;HTML\u0026lt;/b\u0026gt; \u0026lt;/div\u0026gt;   字体强调 1 2 3 4 5 6 7  *斜体*或_斜体_ **粗体**或__粗体__ ~~删除线~~ ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~   输出效果为：\n斜体\t斜体\t粗体\t粗体\t删除线\n加粗和斜体\t删除线和加粗\t删除线和斜体\t加粗, 斜体和删除线\n引用 在要引用的任何文本之前添加 \u0026gt;：\n1  \u0026gt; 这是引用的文本    这是引用的文本\n 引用可以嵌套：\n1 2  \u0026gt; 第一层 \u0026gt;\u0026gt; 第二层    第一层\n 第二层\n  列表 无序列表 可以使用以下任何符号来表示无序列表中的项：\n1 2 3 4  * 一项内容 * 一项内容 - 一项内容 + 一项内容   输出效果为:\n 一项内容  一项内容     一项内容   一项内容  对应Typora里的快捷键是ctrl+shift+]。\n有序列表 1 2 3  1. 第一项 2. 第二项 3. 第三项   输出效果为:\n 第一项 第二项 第三项  对应Typora里的快捷键是ctrl+shift+[。\n任务列表 任务列表使你可以创建带有复选框的列表。 要创建任务列表，请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ])。要选择一个复选框，请在方括号之间添加 x ([x])。\n1 2 3  - [x] Write the press release - [ ] Update the website - [ ] Contact the media   输出效果为:\n Write the press release Update the website Contact the media  代码 Typora启用代码块的快捷键是ctrl+shift+k。\n行内代码 用 ` 包装行内代码段。\n1  在这个例子中, `\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;` 会被包裹成 **代码**。   输出效果为:\n在这个例子中，\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; 会被包裹成 代码。\n\n围栏代码块 使用 \u0026ldquo;围栏\u0026rdquo; ``` 来生成一段带有语言属性的代码块。类似的有shortcode里的highlight。\n1  Sample text here...   语法高亮 要激活它，只需在第一个代码 \u0026ldquo;围栏\u0026rdquo; 之后直接添加你要使用的语言的文件扩展名，比如```js，语法高亮显示将自动应用于渲染的 HTML 中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  grunt.initConfig({ assemble: { options: { assets: \u0026#39;docs/assets\u0026#39;, data: \u0026#39;src/data/*.{json,yml}\u0026#39;, helpers: \u0026#39;src/custom-helpers.js\u0026#39;, partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] }, pages: { options: { layout: \u0026#39;default.hbs\u0026#39; }, files: { \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] } } } };   Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息，包括语法高亮的 shortcode。\n linenos：配置行号。有效值是true，false，table，或inline。false如果将其配置为在站点配置中启用，则将关闭行号。 table 将提供友好的复制粘贴代码块。 hl_lines：列出要突出显示的一组行号或行号范围。 linenostart=199：从199开始行号计数。 anchorlinenos：在行号上配置锚点。有效值为true或false; lineanchors：为行号上的锚点配置前缀。将带有后缀-，因此使用选项链接到行号1lineanchors=prefix会将锚点添加prefix-1到页面。  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  ​```js {linenos=table,hl_lines=[8,\u0026#34;14-15\u0026#34;],linenostart=1} grunt.initConfig({ assemble: { options: { assets: \u0026#39;docs/assets\u0026#39;, data: \u0026#39;src/data/*.{json,yml}\u0026#39;, helpers: \u0026#39;src/custom-helpers.js\u0026#39;, partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] }, pages: { options: { layout: \u0026#39;default.hbs\u0026#39; }, files: { \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] } } } }; ​```   输出效果为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  grunt.initConfig({ assemble: { options: { assets: \u0026#39;docs/assets\u0026#39;, data: \u0026#39;src/data/*.{json,yml}\u0026#39;, helpers: \u0026#39;src/custom-helpers.js\u0026#39;, partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] },  pages: { options: { layout: \u0026#39;default.hbs\u0026#39; }, files: { \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] }  } } };   表格 Typora快捷键为ctrl+T。\n   选项 描述     data 数据   txt 文本    \n链接 基本链接 1  \u0026lt;https://fmx789.github.io\u0026gt;   https://fmx789.github.io\n添加标题的链接 1  [我的博客](https://fmx789.github.io)   我的博客\n对应Typora里的快捷键是ctrl+k。\n文内链接 1  [跳转到链接](#link-test)   同时在跳转到的地方加个标签，注意标签不要跟带#的标题放在同一行，如果是非标题则无所谓：\n1 2  \u0026lt;a id=\u0026#34;link-test\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; ### 链接   跳转到“链接”标题\n注意  如果要链接不同的文章，请查看此处。\n如果要鼠标悬停时显示提示信息，请查看此处。\n   脚注 脚注使你可以添加注释和参考，而不会使文档正文混乱。\n创建脚注时，在添加脚注引用的位置会出现带有链接的上标编号。\n单击链接便会跳至页面底部的脚注内容。\n1 2 3 4 5 6  脚注编号： 这是一个数字脚注[^1]. 这是一个英文脚注[^label] 脚注内容： [^1]: 这是一个数字脚注 [^one]: 这是一个带标签的脚注   这是一个数字脚注1. 这是一个英文脚注2\n图片 1  ![Alt text][id]   更丰富的图片功能详见本文此处。\n主题拓展语法 ruby注释 1  [内容]{?^}(这是注释)   [内容]^(这是注释)\n分数 1  [1]{?/}[3]   [1]/[3]\nFont Awesome图标库 1 2  芜湖起飞! {?:}(fas fa-rocket fa-fw): 真开心! {?:}(far fa-grin-tears):   芜湖起飞! :(fas fa-rocket fa-fw):\n真开心! :(far fa-grin-tears):\n转义字符 特殊情况下，文章内容与Markdown基本/拓展语法冲突时，可以使用转义字符来帮助渲染出想要的内容。\n1  {{??}:}joy:   这将展示{?:}joy:而不是😂。\n参考链接   markdown基本语法\n  主题拓展语法\n    这是一个数字脚注 \u0026#x21a9;\u0026#xfe0e;\n 这是一个带标签的脚注 \u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"http://fmx789.github.io/posts/markdown-grammer.html/","tags":["Markdown","ruby","font-awesome"],"title":"Markdown语法"},{"categories":["Hugo"],"contents":"下载安装包 从 https://github.com/gohugoio/hugo/releases 下载extended版本的Windows-64bit.zip到某个目录，如D:\\Hugo，解压后，将该目录添加到Windows的PATH环境变量。\n打开cmd，输入hugo version验证安装是否成功，有显示版本即可。\n同时，最好安装上Go和git。\n建立新网站 进入一个磁盘用于存放博客文件，如D:\\。然后在该文件夹右键Git Bash Here（当然用cmd也可以），打开命令行键入如下命令。\n1 2  hugo new site blog “blog”可定义为自己喜欢的名字   该代码将在D盘创建一个名为blog的文件夹并在里面创建一个新的Hugo网站。当前，站点的目录如下：\n1 2 3 4 5 6 7  archetypes/ #存放创建md文件时使用的模版，可定制 content/ #存放各种展示给访客的md文件，该目录下课创建多个子目录来进行分类，每个子目录是一个section data/\t#存放定义变量的模版文件 layouts/\t#存放渲染html的模版文件 static/\t#存放静态内容，如图片等 themes/\t#存放原始主题文件，没有必要的情况下不要改动里面文件 config.toml\t#主题配置文件   添加主题 接下来就是激动人心的选主题时刻了，可以去 https://themes.gohugo.io/ 选一款自己比较喜欢的主题作为初始的主题，之后再补充里面的细节。\n推荐几款比较不错的主题：LeaveIt，MemE，even，LoveIt，Academic\n从GitHub下载主题并将其添加到站点的themes目录中，此处以LoveIt主题为例：\n1 2 3  cd blog git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt   然后将主题添加到站点配置中，在config.toml中添加\n1  theme = \u0026#34;LoveIt\u0026#34;   然后，在前往主题配置网站的SiteConfiguration复制其余站点配置到config.toml中。\n添加内容 新建一篇文章：\n1  hugo new \u0026#34;posts/hello-world.md\u0026#34;   新建一个关于页面：\n1  hugo new \u0026#34;about/_index.md\u0026#34;   可以看到在~blog\\content下会产生posts和about两个文件夹，里面各有一个markdown文件，把里面的draft:true删除。\n启动服务器 1 2 3 4 5 6 7 8 9 10 11 12  hugo server hugo server后可加的常用参数 --bind=\u0026#34;127.0.0.1\u0026#34; 服务监听IP地址； -p, --port=1313 服务监听端口； -w, --watch[=true] 监听站点目录，发现文件变更自动编译； -D, --buildDrafts 包括被标记为draft的文章； -E, --buildExpired 包括已过期的文章； -F, --buildFuture 包括将在未来发布的文章； -b, --baseURL=\u0026#34;www.example.com\u0026#34; 服务监听域名； --log[=false]: 开启日志； --logFile=\u0026#34;/var/log/hugo.log\u0026#34;: log输出路径； -t, --theme=\u0026#34;\u0026#34; 指定主题；   打开浏览器跳转即可看到渲染的界面，在命令行按ctrl+c结束。\n托管到GitHub Page   创建一个仓库，命名为\u0026lt;YOUR-PROJECT\u0026gt;（例如blog）。这是将包含博客源文件的仓库，这个仓库可以是Private/Public。\n  创建一个仓库，命名为\u0026lt;USERNAME\u0026gt;.github.io。这是用于部署博客的仓库，且该仓库必须是Public的。这是通过main分支来启用GitHub Page的方式，只允许一个仓库通过main分支来启用GitHub Pages。配置好后通过直接访问https://\u0026lt;USERNAME\u0026gt;.github.io/，即可看到个人站点。\n此外，如果有其他仓库需要使用GitHub Page，则需要给仓库创建一个名为gh-pages的分支，然后把该分支设为source分支即可。\n  配置公钥和私钥到仓库。这一步是为了使用Git Action自动构建，自动部署，每次只需上传源文件到\u0026lt;YOUR-PROJECT\u0026gt;仓库即会自动部署到\u0026lt;USERNAME\u0026gt;.github.io仓库。首先在本地博客根目录打开Git Bash，输入以下命令生产密钥对。\n1 2 3  # 修改 username 为你自己的 GitHub 用户名 ssh-keygen -t rsa -b 4096 -C \u0026#34;username@users.noreply.github.com\u0026#34; # 注意：这次不要直接回车，以免覆盖之前生成的,改个名字即可   将生成的密钥对分别添加到：\n  公钥(.pub后缀，如id_rsa.pub)\n前往\u0026lt;USERNAME\u0026gt;.github.io，Settings \u0026gt; Deploy keys \u0026gt; Add deploy key，复制到对应框中。\n名字随意，但务必勾选Allow write access。\n  私钥(无后缀，如id_rsa)\n前往\u0026lt;YOUR-PROJECT\u0026gt;仓库，Settings \u0026gt; Secrets \u0026gt; New secret，复制到对应框中。\n此时名字必须为DEPLOY_KEY，这是为了与后面的Action脚本里环境变量名字对应。\n  在本地博客根目录下创建.github/workflows/build.yml，在里面填入：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  # .github/workflows/build.ymlname:CI#自动化的名称on:push:# push的时候触发branches:# 那些分支需要触发- mainjobs:build:runs-on:ubuntu-latest# 镜像市场steps:- name:checkout# 步骤的名称uses:actions/checkout@v2.3.4#软件市场的名称with:# 参数submodules:true- name:Setup Hugouses:peaceiris/actions-hugo@v2.4.13with:hugo-version:\u0026#39;0.78.1\u0026#39;#填写本地使用的Hugo版本extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v2.5.1env:ACTIONS_DEPLOY_KEY:${{ secrets.DEPLOY_KEY }}EXTERNAL_REPOSITORY:username/username.github.ioPUBLISH_BRANCH:mainPUBLISH_DIR:./public  这里需要改四处地方：\n Line7，填写放置源文件仓库的分支。 Line19，hugo-version填写本地使用的Hugo版本。 Line27，EXTERNAL_REPOSITORY填写部署GitHub Pages的仓库。 Line28，PUBLISH_BRANCH填写部署GitHub Pages仓库的分支。    创建一个.gitignore文件，并在其中添加下面的内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  ### Hugo ### # Generated files by hugo /resources/_gen/ .env public/ # /themes/ # Executable may be added to repository hugo.exe hugo.darwin hugo.linux # OSX .DS_Store     绑定存放源文件的远程仓库\n1  git remote add origin git@github.com:username/\u0026lt;YOUR-PROJECT\u0026gt;.git     使用脚本自动上传。创建一个upload.sh脚本，用chmod +x upload.sh将其设为可执行文件。\n注意  首次上传建议将以下脚本手动输入一次，特别是第13行应换成git push -u origin main，跟之后的上传有略微区别。如果不让push，先使用git pull再push即可。     1 2 3 4 5 6 7 8 9 10 11 12 13  #!/bin/sh # If a command fails then the update stops set -e git add . # Commit changes. msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; git push     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  此后使用`./upload.sh \u0026#34;Your optional commit message\u0026#34;`便会提交源文件到`\u0026lt;YOUR-PROJECT\u0026gt;`上。在该仓库的`Actions`处可以看到部署进度，大约等一分钟Action运行成功后，从浏览器访问`https://\u0026lt;USERNAME\u0026gt;.github.io`便可以查看博客内容了。 ## 添加域名 不同域名服务商略有区别，但原理是一样的，从国外域名服务商购买域名配置简单些。 购买域名后，找到配置DNS的界面，添加几条`A`记录和`CNAME`记录： | Type | Host | Value | | :---: | :--: | :----------------: | | A | @ | 185.199.108.153 | | A | @ | 185.199.109.153 | | A | @ | 185.199.110.153 | | A | @ | 185.199.111.153 | | CNAME | www | username.github.io | 在本地博客的`static`目录下创建名为`CNAME`的文件，里面填入域名，如`xxx.com`。 接下来去GitHub配置，在`\u0026lt;USERNAME\u0026gt;.github.io`仓库点击Settings \u0026gt; Options，下拉找到：   在`Custom domain`填入注册的域名后，等待一段时间生成证书，然后勾选`Enforce HTTPS`，进度会在上方显示(Your site is published at xxx那里)。部署成功的图如上所示。 同时，可以发现在该仓库多了一个名为`CNAME`的文件，里面记录的就是刚刚绑定的域名，之后就可以通过该域名访问博客了。 ## 同时部署到多个Pages服务 打开博客根目录隐藏文件夹`.git`下的`config`文件，添加`url`源 ```sh [remote \u0026#34;origin\u0026#34;] url = git@github.com:\u0026lt;USERNAME\u0026gt;/\u0026lt;USERNAME\u0026gt;.github.io.git url = git@e.coding.net:\u0026lt;USERNAME\u0026gt;/hugo-deploy/hugo-deploy.git #这个是添加的url源 fetch = +refs/heads/*:refs/remotes/origin/*   此后每次执行git push origin main就会推送到多个远程库。\n在新的环境继续工作 新的电脑上工作就可以把之前同步到GitHub上的博客源文件同步下来继续工作。\n在安装好环境(Go+git+Hugo)后，在终端进入想要放置博客的目录，使用git命令拉去远程仓库，将submodule初始化并更新。\n1 2 3  git clone \u0026lt;YOUR-PROJECT-URL\u0026gt; \u0026amp;\u0026amp; cd \u0026lt;YOUR-PROJECT\u0026gt; git submodule init git submodule update   在新的环境中，两个子模块的仓库不在任何分支上，需要进入到对应的目录，然后使用git checkout main将分支切换到main上面。\n1 2 3 4  cd public git checkout main cd ../themes/\u0026lt;YOURTHEME\u0026gt; git checkout main   接下来就可以在新的环境继续工作了。\n主题客制化 #免费图标\thttp://www.fontawesome.com.cn/\n#压缩SVG\thttps://jakearchibald.github.io/svgomg/\n#制作图标\thttps://realfavicongenerator.net/\n","permalink":"http://fmx789.github.io/posts/Hugo-blog-build-guide.html/","tags":["Hugo"],"title":"基于Hugo的博客搭建指南"},{"categories":null,"contents":"本站运行时间      \"少年贪玩，青年迷恋爱情，壮年汲汲于成名成家，暮年自安于自欺欺人。人寿几何，顽铁能炼成的精金，能有多少？但不同程度的锻炼，必有不同程度的成绩；不同程度的纵欲放肆，必积下不同程度的顽劣。\"\n\"如要锻炼一个能做大事的人，必定要叫他吃苦受累，百不称心，才能养成坚忍的性格。一个人经过不同程度的锻炼，就获得不同程度的修养，不同程度的效益。好比香料，捣得愈碎，磨得愈细，香得愈浓烈。\" ——杨绛  您好！欢迎来到Kevin Fan的生活与技术博客。\n关于我 我是一位本科学生，主修物联网工程，但同时也对许多其他的领域感兴趣，例如视频剪辑、摄影、电子设备、人工智能、电影等等。\n常用程序语言是C和Python，目前在努力学习C++和Matlab。\n想要成为什么样的人\n 独立 自由 民主 积极帮助他人 在技术/学术领域有一番建树  关于本站点 费曼技巧中提到，验证你是否真正掌握一个知识，就是要看你能否用直白浅显的语言把复杂深奥的问题和知识讲清楚。\n简单来说就是从理解-\u0026gt;简化和类比-\u0026gt;输出的一个往复循环的过程。\n所以，我希望有一个平台来分享一些自己的所见所闻所想。这不是报告式的记录，而是讲解式的记录。什么意思呢？例如，当我花了一段时间，理解了什么是SGD，并且实践了。那么我在写文章的时候，便开始假设，如果我面对的是尚未接触这个概念的自己，我要如何讲解，才能够最有效地让我自己学会。\n在本站点，在技术方面，我会用它来记下我的学术研究，正在学习的内容的笔记，又或者是踩过的坑。另外，如果我看任何电影或电视连续剧，或阅读任何我认为有趣的书，我可能会对它们进行一些摘抄或者谈谈感受。\n本站点由Hugo（一个非常快速的静态站点生成器）驱动，使用的主题是LoveIt，这是一个简洁，多端适配，功能强大的主题。\n评论系统采用Valine，因此您可以无需注册即可发表评论。尽管如此，但还是强烈建议您在评论时留下邮箱地址，以便在回复您的评论时可以第一时间收到消息。如果您不清楚Valine评论系统的使用方法，可以查看这个简易说明。\n博客中的文章均采用 CC BY-NC-SA 许可协议，如果想要转载的话，请注明出处；如需商业性使用，请先邮件联络获得书面许可。假如您在浏览博客的过程中发现了任何问题，欢迎在文章底下留言评论或者邮件告诉我。\n博客内容目前同时发布在GitHub和Gitee两个平台，不定期更新。\n联系方式  email GitHub  ","permalink":"http://fmx789.github.io/about/","tags":null,"title":"关于"},{"categories":["server"],"contents":"服务器总体配置 弹性ECS，服务器位置买最近的，系统选Ubuntu18.04，数据库使用MySQL8.0，数据库展示界面使用Adminer\n修改服务器ssh密码  转到控制台云服务器ECS 点击所购买的服务器 在基本信息处选择“更多”-\u0026gt;重置实例密码 重置之后会提醒重启服务器，重启即可  什么是Docker Docker 包括三个基本概念:\n 镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。  容器与镜像的关系类似于面向对象编程中的对象与类。\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n搭建Docker环境 使用ssh工具连接服务器 这里以putty为例：\nhost_name：填写服务器公网IP，端口默认22\nPS：可以在saved sessions处填一个名字如aliyun，再点击save键保存这次的连接配置，下次再连接\t就不需要再输入了。\n输入用户名和密码即可进入服务器。\n安装Docker CE  更新apt库  1  sudo apt update    允许apt通过HTTPS使用存储库  1  sudo apt install apt-transport-https ca-certificates curl software-properties-common    添加阿里GPG秘钥  1  curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -    添加阿里docker源  1  sudo add-apt-repository \u0026#34;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs)stable\u0026#34;    更新apt源  1  sudo apt-get -y update    安装  1  sudo apt-get -y install docker-ce    查看Docker版本  1  docker --version    启动Docker服务  1  systemctl start docker    测试  1  sudo docker run hello-world   配置阿里云镜像仓库   使用体验平台提供的阿里云子账号登录 容器镜像服务控制台\n  [镜像中心] \u0026gt; [镜像加速器]，可以看到一个专属的镜像加速地址\n  配置Docker镜像加速器（在界面下方可以看到这段代码，复制即可，注意镜像地址替换为自己的专属地址）\n  1 2 3 4 5 6 7 8  sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://******.mirror.aliyuncs.com\u0026#34;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker   使用Docker安装其他服务  查看本地镜像  1  docker images    在ECS实例详情中，点击本实例安全组，配置安全组规则，在入方向添加需要开放的端口，如22，3306，8080，80，443，3389等。  Nginx  拉取最新版的Nginx镜像  1  docker pull nginx:latest    运行容器  1 2 3 4 5  docker run --name nginx-test -p 8080:80 -d nginx 参数说明： --name nginx-test：容器名称。 -p 8080:80： 端口进行映射，将本地8080端口映射到容器内部的80端口。 -d nginx： 设置容器在后台一直运行。    在浏览器地址栏输入http://\u0026lt;ECS公网IP地址\u0026gt;:8080访问Nginx服务。  MySQL  拉取最新版的MySQL镜像  1  docker pull mysql:latest    运行容器  1 2 3 4 5  docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql 参数说明： --name mysql-test：容器名称。 -p 3306:3306 ：端口进行映射，将本地3306端口映射到容器内部的3306端口。 MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。    进入MySQL  1  docker exec -it mysql-test bash（mysql-test换成自己mysql容器名称）    登录MySQL  1  mysql -u root -p 123456    查看下MySQL中用户的信息  1  select host,user,plugin,authentication_string from mysql.user;   其中，host为 % 表示不限制ip，localhost表示本机使用，如果plugin不是mysql_native_password 则需要修改密码；\n 修改MySQL密码  1 2 3 4  修改mysql root用户不限制ip且修改密码 ALTER user \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;123456\u0026#39;; 刷新权限 FLUSH PRIVILEGES;   之后便可以用如navicat，datagrip等软件连接MySQL。\nAdminer  拉取最新版的Adminer镜像  1  docker pull adminer:latest    创建容器  1 2 3 4 5 6  docker run --link mysql:mysql --name adminer -p 9999:8080 -d --restart=always adminer 参数说明： -d：设置容器在后台一直运行。 -p 9999:8080：端口进行映射，将本地9999端口映射到容器内部的8080端口。 --restart=always：设置容器开机自启动。 --name adminer：容器名称。     访问数据库\n浏览器打开网页http://\u0026lt;ECS公网IP地址\u0026gt;:9999。\n服务器填写公网IP，用户名和密码填写MySQL预设的用户名和密码。\n  安装Docker Compose 1 2 3 4  #运行以下命令以下载Docker Compose的当前稳定版本： sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose #将可执行权限应用于二进制文件： sudo chmod +x /usr/local/bin/docker-compose    检查安装  1  docker-compose -v   Docker 常用命令  启动docker sudo service docker start 停止docker sudo service docker stop 重启docker sudo service docker restart 列出Docker CLI命令 docker docker container \u0026ndash;help 显示Docker版本和信息 docker \u0026ndash;version docker version docker info Execute Docker image docker run hello-world（hello-world可替换为任一已创建容器的名字） 列出镜像列表 docker image ls 列出docker容器 (running, all, all in quiet mode) docker container ls docker container ls \u0026ndash;all docker container ls -aq  python访问云数据库 安装pymysql 1  pip3 install pymysql   数据库常用操作（参考菜鸟教程） 1 2 3 4 5 6  cmd管理员模式打开 mysql -u root -p 111111 --登录 show databases; --展示所有数据库 create database database_name; --创建数据库 use database_name; --选择数据库 show tables; --展示所有数据表   \u0026ndash;创建数据表\n1 2 3 4 5 6  CREATE TABLE IF NOT EXISTS `table_name`( `id` INT UNSIGNED AUTO_INCREMENT, --自增 `title` VARCHAR(100) NOT NULL, `author` VARCHAR(40) NOT NULL, PRIMARY KEY ( `id` ) --主键 )ENGINE=InnoDB DEFAULT CHARSET=utf8; --ENGINE 设置存储引擎，CHARSET 设置编码   \u0026ndash;删除数据表\n1  DROP TABLE table_name ;   \u0026ndash;插入数据\n1 2 3  INSERT INTO table_name ( field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );   \u0026ndash;查询数据\n1 2 3 4 5 6 7  SELECT column_name,column_name FROM table_name [WHERE Clause] --WHERE 语句来包含任何条件 [LIMIT N][ OFFSET M] --LIMIT 属性来设定返回的记录数，OFFSET指定SELECT语句开始查询的数据偏移量，为0 返回数据表 table_name 的所有记录 select * from table_name;   \u0026ndash;修改数据\n1 2  UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause] --WHERE 语句来包含任何条件   \u0026ndash;删除数据\n1  DELETE FROM table_name [WHERE Clause] --WHERE 语句来包含任何条件   \u0026ndash;对匹配数据操作（like子句）\n1 2 3 4 5 6  SELECT field1, field2,...fieldN FROM table_name WHERE field1 LIKE condition1 [AND [OR]] filed2 = \u0026#39;somevalue\u0026#39; LIKE 通常与 % 一同使用，它类似于UNIX或正则表达式中的星号 *。比如 WHERE source LIKE \u0026#34;%school\u0026#34;，没有使用百分号 %, LIKE 子句与等号 = 的效果是一样的。 可以使用 AND 或者 OR 指定一个或多个条件。 可以在 DELETE 或 UPDATE 命令中使用 WHERE...LIKE 子句来指定条件。   实例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  import pymysql class Mysql: def __init__(self): # 建立数据库连接 self.db = pymysql.connect(host=\u0026#39;localhost\u0026#39;, # 此处必须是是云端填公网ip，本地填localhost port=3306, # 端口 user=\u0026#39;root\u0026#39;, # mysql的登录账号admin password=\u0026#39;111111\u0026#39;, # mysql的登录密码pwd db=\u0026#39;test\u0026#39;, # mysql中要访问的数据表 charset=\u0026#39;utf8\u0026#39;) # 表的字符集 # 获取游标对象 self.cursor = self.db.cursor() def end(self): self.cursor.close() self.db.close() def insert(self, sql, ls): self.cursor = self.db.cursor() self.cursor.executemany(sql, ls) # 一次插入多条方式 # self.cursor.execute(sql, ls) #一次插入一条方式 self.db.commit() def delete(self, sql): self.cursor = self.db.cursor() self.cursor.execute(sql) self.db.commit() def query(self, sql): self.cursor = self.db.cursor() self.cursor.execute(sql) for row in self.cursor.fetchall(): # print(\u0026#34;\u0026#39;id\u0026#39;:%s\\t title:%s\\t author:%s\u0026#34; % row) print(row) print(f\u0026#34;一共查找到：{self.cursor.rowcount}\u0026#34;) def modify(self, sql, ls): self.cursor = self.db.cursor() self.cursor.execute(sql, ls) self.db.commit() if __name__ == \u0026#39;__main__\u0026#39;: mysql = Mysql() sql = \u0026#34;insert into test values(%s,%s,%s)\u0026#34; # 添加过主键自增（PRINARY KEY AUTO_INCREMENT）第一列在增加数据的时候， # 可以写为0或者null，这样添加数据可以自增，从而可以添加全部数据， # 而不用特意规定哪几列添加数据。 # ls1和ls2可以是列表或者元组 #插入 # ls = [0, \u0026#39;hhh\u0026#39;, \u0026#39;李三\u0026#39;] ls1 = [0, \u0026#39;hhh\u0026#39;, \u0026#39;小明\u0026#39;] ls2 = (0, \u0026#39;hey\u0026#39;, \u0026#39;王五\u0026#39;) ls = [ls1, ls2] mysql.insert(sql, ls) sql = \u0026#34;select * from test\u0026#34; # sql = \u0026#34;select title,author from test;\u0026#34; #选择部分列 mysql.query(sql) #修改 ls = [\u0026#39;wow\u0026#39;, \u0026#39;李四\u0026#39;, 1] sql = \u0026#34;update test set title=%s,author=%swhere id=%s\u0026#34; mysql.modify(sql, ls) sql = \u0026#34;select * from test\u0026#34; mysql.query(sql) #删除 sql = \u0026#34;delete from test where author=\u0026#39;李四\u0026#39;\u0026#34; mysql.delete(sql) sql = \u0026#34;select * from test\u0026#34; mysql.query(sql) mysql.end()   ","permalink":"http://fmx789.github.io/posts/Aliyun-Server-setup-Guide.html/","tags":["阿里云","Docker","Nginx","MySQL","Adminer","python"],"title":"阿里云服务器搭建指南"},{"categories":["openvino"],"contents":"openvino环境安装步骤 下载发行工具包 openvino官方下载发行版工具包，一般建议下载最新版本。\n解压工具包，配置依赖等 下载好后，放到树莓派的home/pi/Downloads目录下准备安装。（不建议修改位置）\n    创建安装目录\n1  sudo mkdir -p /opt/intel/openvino     解压安装\n1  sudo tar -xf l_openvino_toolkit_runtime_raspbian_p_\u0026lt;version\u0026gt;.tgz --strip 1 -C /opt/intel/openvino     安装外部依赖CMake\n1  sudo apt install cmake     设置环境变量\n临时设置环境变量\n1  source /opt/intel/openvino/bin/setupvars.sh   永久设置环境变量\n1  echo \u0026#34;source /opt/intel/openvino/bin/setupvars.sh\u0026#34; \u0026gt;\u0026gt; ~/.bashrc   永久环境变量成功的测试，新开一个终端（terminal），在第一行会看到如下字样：\n1  [setupvars.sh] OpenVINO environment initialized     添加USB规则\n1、将当前的Linux用户添加到该users组：\n1  sudo usermod -a -G users \u0026#34;$(whoami)\u0026#34;   若没有永久设置环境变量，请保证在setupvars.sh运行后执行。\n2、安装运行install_NCS_udev_rules.sh脚本的USB规则：\n1  sh /opt/intel/openvino/install_dependencies/install_NCS_udev_rules.sh   3、插入神经计算棒2。\n  测试用例（人脸检测） 框选输入图像中的人脸   创建build目录\n1  mkdir build \u0026amp;\u0026amp; cd build     构建对象检测样本\n1 2  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\u0026#34;-march=armv7-a\u0026#34; /opt/intel/openvino/deployment_tools/inference_engine/samples/cpp make -j2 object_detection_sample_ssd     下载预训练的人脸检测模型\n.bin文件\n1  wget --no-check-certificate https://download.01.org/opencv/2020/openvinotoolkit/2020.1/open_model_zoo/models_bin/1/face-detection-adas-0001/FP16/face-detection-adas-0001.bin   .xml文件\n1  wget --no-check-certificate https://download.01.org/opencv/2020/openvinotoolkit/2020.1/open_model_zoo/models_bin/1/face-detection-adas-0001/FP16/face-detection-adas-0001.xml     运行用例\n1  ./armv7l/Release/object_detection_sample_ssd -m face-detection-adas-0001.xml -d MYRIAD -i \u0026lt;path_to_image\u0026gt;   该应用程序输入图像的路径，输出一个图像（out_0.bmp），其中检测到的面孔用矩形括起来。\n  通过树莓派摄像头实时检测人脸（参考b站同济子豪兄）   配置摄像头\n1 2 3  sudo nano /etc/modules 在该文件末尾添加一行 bcm2835-v412   输入命令\n1  vcgencmd get_camera   得到supported = 1 detected = 1，证明摄像头连接成功。\n1  ls /dev   看到video0即为摄像头。\n  配置展示窗口\n1  export DISPLAY=:0.0     例程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import cv2 as cv import numpy as np print(\u0026#34;------------------start detection!------------------\u0026#34;) # 载入bin文件和xml文件 net = cv.dnn.readNet(\u0026#34;face-detection-adas-0001.xml\u0026#34;, \u0026#34;face-detection-adas-0001.bin\u0026#34;) net.setPreferableTarget(cv.dnn.DNN_TARGET_MYRIAD) cap = cv.VideoCapture(0) while(1): ret, frame = cap.read() frame = cv.resize(frame, (480, 320), interpolation=cv.INTER_CUBIC) blob = cv.dnn.blobFromImage(frame, size=(672, 384), ddepth=cv.CV_8U) net.setInput(blob) out = net.forward() # 画人脸框 for detection in out.reshape(-1, 7): confidence = float(detection[2]) # 获取左上角坐标 xmin = int(detection[3] * frame.shape[1]) ymin = int(detection[4] * frame.shape[0]) # 获取右下角坐标 xmax = int(detection[5] * frame.shape[1]) ymax = int(detection[6] * frame.shape[0]) if confidence \u0026gt; 0.5: cv.rectangle(frame, (xmin, ymin), (xmax, ymax), color=(0, 255, 0)) # 展示图像 cv.imshow(\u0026#34;capture\u0026#34;, frame) if cv.waitKey(1) \u0026amp; 0XFF == ord(\u0026#34;q\u0026#34;): cv.imwrite(\u0026#34;out.png\u0026#34;, frame) print(\u0026#34;------------------save image!------------------\u0026#34;) break # 关闭摄像头和窗口 cap.release() cv.destoryAllWindows() print(\u0026#34;------------------end detection!------------------\u0026#34;)      树莓派运行推理模型的开发流程   选择预训练模型；\n  使用模型优化器，来转换模型；\n  最后在树莓派上推理模型。\nopen model zoo预训练模型：\nhttps://download.01.org/opencv/2020/openvinotoolkit/2020.4/open_model_zoo/models_bin/\n  常规的开发方式，需要在 open model zoo 中寻找适合的模型，对于大多数业务来说，都能满足基本需要。若需要跑一些比较前沿的模型或者是自己设计的神经网络时，那各类模型转换的方法则是必备技能，难度相应也会大一些。\n附上pytorch转ONNX格式后应用在openvino的方法：\nhttps://zhuanlan.zhihu.com/p/116065374\n参考链接  openvino官方 ","permalink":"http://fmx789.github.io/posts/raspberry-pi-4b-openvino-guide.html/","tags":["raspberry","openvino","ncs2","camera"],"title":"树莓派4B安装openvino环境指南（参考官网撰写）"},{"categories":["openvino"],"contents":"openvino环境安装步骤 下载发行版工具包 openvino官方下载发行版工具包，一般建议下载最新版本。下载页面选项如下图。\n  然后选择工具包版本，没有特殊要求下载Full Package就可。\n  安装exe\u0026amp;补齐依赖项 下载好后，点击exe程序安装。\n  建议按照默认路径安装，不作修改（省去后期很多麻烦），没有特殊要求全选即可。\n  提示缺少的依赖项暂且不管，点击下一步完成安装。但需要记住哪些依赖项还没安装，后期要逐一补上。\n  依赖项如下：\n Microsoft Visual Studio 2019/2017（安装“使用C++的桌面开发“模块）和对应的buildtools的“C++生成工具”。默认配置即可，这里建议不修改默认安装路径。      CMake3.10或更高版本的64位，其中vs2019要搭配CMake3.14。要添加到系统变量Path。\n  Python3.6-3.8的64位版本，添加到系统变量Path。\n  设置环境变量 确认依赖项补齐后，以管理员身份打开cmd，然后执行openvino的“bin”目录下的setupvars.bat以临时设置环境变量。永久环境变量设置请参考其他帖子。cmd不用关，执行下一步骤。\n1 2  cd C：\\ Program Files（x86）\\ Intel \\ openvino_2021 \\ bin \\ setupvars.bat   配置模型优化器 可以一次性配置所有支持框架的模型优化器，也可以单独选择某一个来配置。同样也在第三步的cmd里执行。下载速度慢，可给PIP全局换源。\n为所有支持框架配置 转到bat文件目录。\n1  cd C：\\ Program Files（x86）\\ Intel \\ openvino_2021 \\ deployment_tools \\ model_optimizer \\ install_prerequisites   运行配置文件。（为Caffe *，TensorFlow * 1.x，MXNet *，Kaldi *和ONNX *配置Model Optimizer）\n1  install_prerequisites.bat   为单独框架配置 转到bat文件目录。\n1  cd C：\\ Program Files（x86）\\ Intel \\ openvino_2021 \\ deployment_tools \\ model_optimizer \\ install_prerequisites   对于Caffe：\n1  install_prerequisites_caffe.bat   对于TensorFlow 1.x:\n1  install_prerequisites_tf.bat   对于TensorFlow 2.x:\n1  install_prerequisites_tf2.bat   对于MXNet：\n1  install_prerequisites_mxnet.bat   对于ONNX：\n1  install_prerequisites_onnx.bat   对于Kaldi：\n1  install_prerequisites_kaldi.bat   使用验证脚本验证安装 在CPU上运行验证程序，共两个程序。\n转到demo目录。\n1  cd C：\\ Program Files（x86）\\ Intel \\ openvino_2021 \\ deployment_tools \\ demo \\   运行图像分类验证脚本 1  demo_squeezenet_download_convert_run.bat   运行结果：\n  此处有可能遇到“Failed to connect to raw.githubusercontent.com port 443: Connection refused“的问题，需要修改系统hosts文件。\n方法请参考下列网址，先找到github域名地址，再到hosts文件里添加。\nhttps://blog.csdn.net/donaldsy/article/details/107482368?utm_medium=distribute.pc_relevant.none-task-blog-title-1\u0026amp;spm=1001.2101.3001.4242\nhttps://jingyan.baidu.com/article/624e7459b194f134e8ba5a8e.html\n运行推理管道验证脚本 1  demo_security_barrier_camera.bat   运行结果：\n   神经计算棒2使用 测试 windows无需配置USB驱动程序，将神经计算棒2插入USB端口，输入如下命令：\n运行图像分类验证脚本 1 2  cd C:\\\u0026#34;Program Files (x86)\u0026#34;\\Intel\\openvino_2021.1.110\\deployment_tools\\demo .\\demo_squeezenet_download_convert_run.bat –d MYRIAD   运行推理管道验证脚本 1 2  cd C:\\\u0026#34;Program Files (x86)\u0026#34;\\Intel\\openvino_2021.1.110\\deployment_tools\\demo .\\demo_security_barrier_camera.bat -d MYRIAD   参考链接   openvino官方\n  神经计算棒2指南\n ","permalink":"http://fmx789.github.io/posts/win10-openVino-ncs2-guide.html/","tags":["openvino","ncs2"],"title":"win10安装openvino环境及神经计算棒2使用指南（参考官网撰写）"},{"categories":null,"contents":"  Dillon LoveIt主题作者     以上友链按添加时间先后排序。欢迎互贴链接。\n申请条件  网站为个人网站，且能稳定访问。 网站内容积极向上。  申请方式 提供信息示例  网站名称：fan\u0026rsquo;s blog网站地址：https://fmx789.github.io网站标志：https://cdn.jsdelivr.net/gh/fmx789/fmx789.github.io/android-chrome-512x512.png网站描述：Kevin Fan的个人博客    将网站信息按以上要求格式在本页留言或发送到本人邮箱。  ","permalink":"http://fmx789.github.io/links/","tags":null,"title":"友链"},{"categories":null,"contents":"","permalink":"http://fmx789.github.io/search/","tags":null,"title":"搜索"}]